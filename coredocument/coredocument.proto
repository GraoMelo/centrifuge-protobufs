syntax = "proto3";

import "google/protobuf/any.proto";

package coredocument;

option go_package = "coredocumentpb";

// `CoreDocument` is a document that can be sent to different nodes and anchored 
// on chain. It handles all the generic features native Centrifuge Documents support:
// 
// * Merkle Roots for the document data
// * Signatures on document data
// * Access Control
message CoreDocument {
  // This is for convenience: the first identifier that was ever used to refer to a 
  // document is kept here. Internally the centrifuge node indexes & bundles documents 
  // by original identifier.
  // 
  // 32 byte value
  bytes document_identifier = 9;
  // The current identifier is the location of the current anchor on chain and is used to 
  // refer to the current state.
  // 
  // 32 byte value
  bytes current_identifier = 3;
  // When creating the next version this should be used.
  bytes next_identifier = 4;
  // Root
  bytes previous_root = 2;
  bytes data_merkle_root = 5;
  bytes document_root = 7;
  // Signatures
  repeated Signature signatures = 6;
  // List of collaborators on this document. These Centrifuge Identities have access
  // to the document and should receive new versions whenever a document is updated.
  // repeated bytes collaborators = 10;
  // repeated AccessControlEntry acl = 11;

  // The previous document is referenced here but doesn't need to be provided and can
  // be left blank
  //
  // This is a readonly field
  repeated CoreDocument previous_versions = 8;
  // Document a serialized document
  google.protobuf.Any embedded_data = 13;
  google.protobuf.Any embedded_data_salts = 14;
}

// Signature contains the entity ID, public key used and signature)
message Signature {
  // `entity_id` is the CentrifugeID of the entity signing the document.
  bytes entity_id = 1;
  // `public_key` is the public key of the `entity` used for signing the `CoreDocument`
  bytes public_key = 2;
  bytes signature = 3;
}
